MAVEN]
	-MAVEN 도움말 사이트:http://maven.apache.org/guides/introduction/introduction-to-the-pom.html

	-빌드 TOOL이면서 즉 빌드하게 되면 컴파일과 패키징을 한꺼번에 할 수 있다.
           라이브러리(.jar)를 자동으로 관리해주는 TOOL
           즉 스프링 프로젝트에서 필요한 라이브러리를
     POM.XML에 등록하면 메이븐 저장소에서 다운로드하여
     PROJECT에 자동으로 추가시켜준다.
           또한 메이븐기반으로 프로젝트를 생성하면
     SPRING에 필요한 최소한의 라이브러리가 자동으로 포함되어 있다.
			 
	
	-MAVEN을 사용하는 이유는 라이브러리의 종속성을 유기하기 위함이다.
	 즉 A라는 라이브러리가 B라는 라이브러리가 꼭 필요하다면 MAVEN에서는 A라는 라이브러리를 저장소에서
	 가져오면 B도 자동으로 프로젝트로 가져 온다.

	-POM.XML이란?
	 Project Object Model(POM)의 약자로 
	 프로젝트의 구조와 내용을 설명하고 있으며 
	 POM.XML 파일에 프로젝트 관리 및 빌드에 필요한 환경 설정,
	 의존성 관리 등의 정보들을 기술함_xml에 코드 적으니까 알아서 다운함, 삭제도 알아서

	POM.XML 파일]
	예]
	<dependency>
	    <groupId>javax.servlet</groupId>
	    <artifactId>servlet-api</artifactId>
	    <scope >provided</scope>
	    <version>2.5</version>
	</dependency>


	의존성 scope의 종료]
	-compile: 기본값으로 모든 클래스 패스에서 사용 가능
	-provided: 컴파일과 유사하나 패키지에는 포함되지 않는다. 컨테이너나 JDK에서 제공. 예) Servlet API for web apps
	-runtime: 컴파일러가 아닌 런타임 시에만 사용됨
	예) JDBC dirvers
	-test: 테스트 단계에서만 유용함 예)Junit
	-system: provided와 유사하나 개발자가 직접 JAR 파일을 제공해야 함.저장소에서 지정한 dependency를 찾지 않는다.

	의존성 분석 순서]
	1. 로컬 저장소에서 의존성 확인
	2. 원격 저장소 리스트에서 의존성 확인
	3. 1과 2가 실패하면 의존성 에러 보고

	의존성 선언 항목]
	1. <groupId>: 부분적인 프로젝트나 조직에서의 라이브러리 집합을 식별하기 위해 제공(주로 회사명 혹은 도메인명)
	2. <artifactId>: 프로젝트의 실제 이름으로 groupId와 합쳐져 프로젝트 식별에 쓰임(주로 어플리케이션 명)
	3. <version>: 선언한 의존성 artifact의 버전으로 프로젝트 내에서 사용하는 artifcat의 일관성을 추구할 수 있음
	
	※즉 어느 회사에서 어느 프로젝트를 개발했는지 구분하기 위한 태그
	예]메이븐 프로젝트 생성시 com.mycompany.myapp라고 설정하면 groupId는 com.mycompany가 되고
	   articfactId는 myapp가 된다


	POM.XML에 라이브러리 추가 방법]
	
	-MAVEN 중앙저장소(http://mavenrepository.com) 사용
	mavenrepository.com -> spring context 검색 
	->버전선택(http://mavenrepository.com/artifact/org.springframework/spring-context/3.2.4.RELEASE)
	->dependency태그 복사후 pom.xml에 추가
	혹은 직접 다운로드후 WEB-INF/lib에 추가

	※WEB-INF/lib에 추가후 설정작업
	프로젝트 우클릭->properties->Java Build Path->Libraries탭메뉴->
	Add Library->Web App Libraries->next->해당 프로젝트 선택



[메이븐으로 프로젝트 생성하기]-NEW ->Spring Project->Spring MVC Project선택

※MAVEN 동작하려면 환경변수 중에 JAVA_HOME 변수가 반드시 설정되어 있어야 함
※이클립스 Kepler나 Luna버전은 자동으로 MAVEN이 탑재되 있다.
  이전버전은 아래처럼 설정

1.다운로드

 http://maven.apache.org/download.html

2.환경변수 설정

 MAVEN_HOME=C:\Java\apache-maven-3.0.4
 PATH=C:\Java\apache-maven-3.0.4\bin;%PATH%;

※NAVEN 동작하려면 환경변수 중에 JAVA_HOME 변수가 반드시 설정되어 있어야 함

3 메이븐 설치확인


DOS> mvn -version



4 이클립스에서 MAVEN 플러그인 설치

 4-1. Help->Eclipse MarketPlace에서 Maven Integration for Eclipse로 검새해서 설치




 4-2 Windows ->Preferences 의  Maven - Installations 설정에 들어간 뒤에 
     Add를 누르고 
     메이븐이 설치되어 있는 폴더를 설정. 
     그러면 자동으로  C:\Java\apache-maven-3.0.4\conf\settings.xml이 
     Global 세팅으로 설정됨. 
     

5. MAVEN으로 프로젝트 실행

   NEW->Spring Template Project->Spring MVC Project로


   POP.XML에 DEPENDENCY추가시 POP.XML클릭->마우스 우클릭->OPEN WITH->MAVEN POM EDITOR선택후
   하단의 DEPENDENCIES에서 검색후 추가

   검색방법: add버튼 클릭 ->Enter groupid....아래 부분에 org.springframework등 입력하면 검색
   결과가 자동으로 뿌려짐
   
6. Run as - Maven Build시 Goals에 주는 옵션들
  --- 주로 package, clean할 것임.
  
compile:컴파일 수행. 컴파일 된 결과는 target/classes에 생성.
test:테스트 코드를 컴파일한 뒤 테스트 코드를 실행.
     테스트 클래스들은 target/test-classes 디렉터리에 생성.
package: 컴파일된 결과물을 패키지 파일로 생성.  
             컴파일, 테스트, 빌드를 수행하여 패키지 파일을 생성.
             프로텍트 이름, 버전, 패키징 옵션에 맞게 파일이 생성됨.
install:패키징한 파일을 로컬 저장소에 배포
        Maven install로 실행
deploy:패키징한 파일을 원격 저장소에 배포 --pom.xml에 설정해줘야한다.
clean: 메이븐 빌드를 통하여 생성된 모든 산출물을 삭제.
        Maven Clean으로 실행




SpringProj 구조

	1) src/main/java
	.java파일을 위치시키는 곳
	2) src/main/resources
	프로젝트에 필요한 자원을 넣는 곳
	.xml 등을 넣는다.
	
	3) src/test/java
	 프로젝트에서 테스트할 것들을 넣는다.
	4) src/test/resources
	프로젝트에서 필요한 자원을 넣는 곳
	
	5) src 안의 구조
	web프로젝트의 WebContent와 같다.
	-- src/main/java 만드는 것이 폴더 형태로 만들어진다.
	--위에서만 건들것!!
	
	6) src의 webapp안의 WEB-INF는 web프로젝트의 WEB-INF와 같다.
	
		src의 webapp의 resources에는 이미지 파일,CSS(static resources)같은 것들 넣음
		
		/SpringProj/src/main/webapp/WEB-INF/views 에 jsp파일이 있다.!!!
		이 jsp 파일은 접근이 불가하다. servlet을 거쳐야만 한다.
		-- 웹 프로젝트의 WebContent와 같다.
		
		/SpringProj/src/main/webapp/WEB-INF/spring의 xml 파일들로 환경설정



https://mvnrepository.com/artifact/org.springframework/spring-core
에서 코어 4.3.29 들어가서 ..
 
 
 
프레임워크가 자동으로 자바 파일 new 해준다.
@Controller를 보고 확인한다.

루트로 부터의 요청을 서블릿이(DispatcherServlet) 받고 그걸 HandlerMapping에게 물어보고
특정 controller에게 요청을 넘긴다.







